{"version":3,"file":"react-responsive.modern.js","sources":["../src/hook.ts","../src/MediaQuery.tsx"],"sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\ntype Query = { query: string };\r\n\r\nexport const useMediaQuery = ({ query }: Query): boolean => {\r\n    const matchMedia = window.matchMedia(query);\r\n    const [isMatch, setIsMatch] = useState(null);\r\n    useEffect(() => {\r\n        setIsMatch(matchMedia.matches);\r\n        const mediaCallback = (e: MediaQueryListEvent) => {\r\n            e.matches ? setIsMatch(true) : setIsMatch(false);\r\n        };\r\n        matchMedia.addEventListener(\"change\", mediaCallback);\r\n        return () => matchMedia.removeEventListener(\"change\", mediaCallback);\r\n    }, [query]);\r\n    return isMatch;\r\n};\r\n","import React from \"react\";\r\nimport { useMediaQuery } from \"./hook\";\r\n\r\ntype MediaFunctionsTypes = {\r\n    children: React.ReactNode | ((matches: boolean) => React.ReactNode);\r\n} & (\r\n    | { orientation: \"landscape\" | \"portrait\" }\r\n    | { minResolution: number | `${number}dppx` }\r\n    | { maxResolution: number | `${number}dppx` }\r\n    | { minWidth: number }\r\n    | { maxWidth: number }\r\n    | { minHeight: number }\r\n    | { maxHeight: number }\r\n);\r\n\r\nfunction parsePropsKey(string: string) {\r\n    return string.replace(/(?<=[a-z])(?=[A-Z])/g, \"-\").toLowerCase();\r\n}\r\n\r\nfunction getUnit(key: string, value: any) {\r\n    if (/resolution/i.test(key)) {\r\n        if (typeof value === \"number\") {\r\n            return `${value}dppx`;\r\n        } else {\r\n            return value;\r\n        }\r\n    }\r\n    if (/width/i.test(key) || /height/i.test(key)) {\r\n        return `${value}px`;\r\n    }\r\n    return value;\r\n}\r\n\r\nexport default function MediaQuery(props: MediaFunctionsTypes) {\r\n    const generatorMediaQuery = (): string => {\r\n        let mediaString = \"\";\r\n        const entries = Object.entries(props);\r\n        entries.forEach(([key, value]) => {\r\n            if (key !== \"children\") {\r\n                if (mediaString.length === 0) {\r\n                    mediaString = `(${parsePropsKey(key)}: ${getUnit(\r\n                        key,\r\n                        value\r\n                    )})`;\r\n                } else {\r\n                    mediaString += ` and (${parsePropsKey(key)}: ${getUnit(\r\n                        key,\r\n                        value\r\n                    )})`;\r\n                }\r\n            }\r\n        });\r\n        return mediaString;\r\n    };\r\n\r\n    const allConditions = useMediaQuery({ query: generatorMediaQuery() });\r\n\r\n    return typeof props.children === \"function\" ? (\r\n        <>{props.children(allConditions)}</>\r\n    ) : allConditions ? (\r\n        <>{props.children}</>\r\n    ) : null;\r\n}\r\n"],"names":["useMediaQuery","query","matchMedia","window","isMatch","setIsMatch","useState","useEffect","matches","mediaCallback","e","addEventListener","removeEventListener","string","replace","toLowerCase","getUnit","key","value","test","MediaQuery","props","allConditions","mediaString","Object","entries","forEach","length","parsePropsKey","generatorMediaQuery","children","_jsx","_Fragment"],"mappings":"sGAIaA,MAAaA,EAAG,EAAGC,YAC5B,MAAgBC,EAAGC,OAAOD,WAAWD,IAC9BG,EAASC,GAAcC,EAAS,MASvC,OARAC,EAAU,KACNF,EAAWH,EAAWM,SACtB,MAAmBC,EAAIC,IACPL,IAAZK,EAAEF,UAGN,OADAN,EAAWS,iBAAiB,SAAUF,GAC/B,IAAMP,EAAWU,oBAAoB,SAAUH,IACvD,CAACR,IACGG,GCAX,WAAuBS,GACnB,OAAOA,EAAOC,QAAQ,uBAAwB,KAAKC,cAGvD,SAAAC,EAAiBC,EAAaC,GAC1B,MAAI,cAAcC,KAAKF,GACE,iBAAjBC,EACO,GAAGA,QAGbA,EAED,SAASC,KAAKF,IAAQ,UAAUE,KAAKF,GAC9B,GAAGC,MAEPA,EAGaE,SAAAA,EAAWC,GAC/B,MAqBmBC,EAAGtB,EAAc,CAAEC,MArBV,MACxB,IAAesB,EAAG,GAiBlB,OAhBgBC,OAAOC,QAAQJ,GACvBK,QAAQ,EAAET,EAAKC,MACP,aAARD,IAC2B,IAAvBM,EAAYI,OACZJ,EAAc,IAAIK,EAAcX,OAASD,EACrCC,EACAC,MAGJK,GAAe,SAASK,EAAcX,OAASD,EAC3CC,EACAC,SAKTK,GAGkCM,KAE7C,MAAiC,mBAAdR,EAACS,sBAChBC,EAAAC,EAAA,CAAAF,SAAGT,EAAMS,SAASR,KAClBA,eACAS,EAAAC,EAAA,CAAAF,SAAGT,EAAMS,WACT"}